//TODO delete
//public-knowledge-graph-neo4j-moueza-peter
//isbn ex https://neo4j.com/docs/cypher-manual/current/administration/constraints/#administration-constraints-unique-nodes
match(m)-[r]->(n)delete(r);
match(m)delete(m);

create (:Metaheuristiques{name:'Metaheuristiques'})-[:RELATED_TO]->(:Pareto{name:'Pareto'});

 create (cancerColon:Maladie:Medicine{name:'CANCERcolon',type:'entity',age:50,idd:'cancerColon'})-[cc:RELATED_TO]-> (cancer:Maladie{name:'CANCER',type:'entity'})-[ccSell:RELATED_TO]->(selles:Selles{neme:'Selles'});
 

//create (cancerColonExample{type:'example',url:'https://www.facebook.com/jeanmarc.majeau.9/videos/657545401536787'})-[:RELATED_TO]->(cancerColon)
//TODO : by variable instead of properties
create (cancerColonExample:CancerColonExample{name:'ccEx',idd:'cancerColonExample',type:'example',url:'https://www.facebook.com/jeanmarc.majeau.9/videos/657545401536787'});
match(ex),(cancColon)
  where ex.idd='cancerColonExample' and cancColon.idd='cancerColon'
    create(ex)-[ccEx:RELATED_TO]->(cancColon)
return ex,ccEx,cancColon;

create (filigrane:filigrane{name:'filigrane',idd:'filigrane',type:'entity'});
create (tatouageOptique:tatouageOptique{idd:'tatouageOptique',type:'entity'});
match(tatou),(fili)
  where tatou.idd='tatouageOptique' and fili.idd='filigrane'
    create(tatou)-[tatFili:RELATED_TO]->(fili)
return tatou,tatFili,fili;

create (:Entity{idd:'master1SyntheseImages',type:'entity'});
 MATCH (a), (b) WHERE a.idd = "tatouageOptique" AND b.idd = "master1SyntheseImages" CREATE (a)-[r:RELATED_TO]->(b) RETURN r;


//photogrammetry FunArcheo, Blender
//CSP-COP -> placement > heuristiques
//                    > trading Portfolio
//IA -> non supervisÃ©
//      segmentation url -> Antlr, Lex Yacc
//ML tranfert

create (:Entity{idd:"Auto",type:"entity"});
create (:Entity:Auto:TF{idd:"AutoML",type:"entity"});
 MATCH (a), (b) WHERE a.idd = "Auto" AND b.idd = "AutoML" CREATE (a)-[r:RELATED_TO]->(b) RETURN r;
create (:Entity:TF{idd:"TransfertLearning",type:"entity"});
 MATCH (a), (b) WHERE a.idd = "AutoML" AND b.idd = "TransfertLearning" CREATE (a)-[r:RELATED_TO]->(b) RETURN r;

        //autocorrelation
           //autoregression
           
create (network:network{name:'network',type:'entity'})-[net:RELATED_TO]->  (GNS3:GNS3{name:'GNS3',type:'example'});
 create (Hitlerum:AdHitlerum{name:"Reductio ad Hitlerum",lang:"latin",type:"entity",url:"https://fr.wikipedia.org/wiki/Reductio_ad_Hitlerum"});
create (:Entity{name:"",breadcrumbs: "lorum ipsum maquette IT",lang:"latin",type:"entity",url:"https://fr.lipsum.com/"});


 create (flambagePoutre:FlambagePoutr:exPoutre:example{name:"network",type:"example"})-[exPoutr:RELATED_TO]->( :SIMULATION{name:"SIMULATION",entity:"",type:"entity"});

create (Gaia:Gaia{name:"GAIA",type:"entity"});
create (Gaia1:Gaia:Example{name:"GAIA1",type:'example',url:"https://www.emploi.sncf.com/nos-offres-emploi/2020-7927/idOrigine/516"});
create (Gaia2:Gaia:Example{name:"GAIA2",type:'example',url:"https://kizomba-elegance.com/"});
match(tatou),(tatou2),(fili)
  where tatou.name='GAIA1' and tatou2.name='GAIA2' and fili.name='GAIA'
    create(tatou)-[gaia1:RELATED_TO]->(fili) create(tatou2)-[gaia2:RELATED_TO]->(fili)
return tatou,tatou2,fili,gaia1, gaia2      ;

//Pascal ....isbn Informatique
      //PhysiqueSimu en Pa
      
 
create (:Entity{name:'',idd:'fractales',type:'entity'});

 
create (:Entity{name:'',idd:'lagrange',nameFr:"lagrangien",nameEn:"lagrangian",type:'entity'});

 
create (:Entity{name:'',idd:'variationsCalculus',nameFr:"calcul de variations",nameEn:"variations calculus",type:'entity'});

  
create (:Entity{name:'',idd:'geodesics',type:'entity'});
create (:Entity{name:'',idd:'fluxGeodesique',nameFr:"flux geodesique",nameEn:"",type:'entity'});
create (:Entity{name:'',idd:'courbeGauche',nameFr:"courbe gauche",nameEn:"",url:"https://homniserv.github.io/solenoid-3D-with-Scilab/
",type:'entity'});

create (:Entity{name:'',idd:'tangent',nameFr:"",nameEn:"tangent",type:'entity'});

create (:Entity{name:'',idd:'quaternion', type:'entity'});
create (:Entity{name:'',idd:'rotation', type:'entity'});
create (:Entity{name:'',idd:'infographie', type:'entity'});

    MATCH (a), (b) WHERE a.idd = "rotation" AND b.idd = "infographie" CREATE (a)-[r:RELATED_TO]->(b) RETURN r;

create (:Entity{name:'',idd:'spin', type:'entity'});
create (:Entity{name:'',idd:'orbitale', type:'entity'});

create (:Entity{name:'',idd:'Blender3D', type:'entity'});
    MATCH (a), (b) WHERE a.idd = "quaternion" AND b.idd = "Blender3D" CREATE (a)-[r:RELATED_TO]->(b) RETURN r;

create (:Entity{name:'',idd:'master', type:'entity'});
create (:Entity{name:'',idd:'ALMA', type:'entity'});
 MATCH (a), (b) WHERE a.idd = "master" AND b.idd = "ALMA" CREATE (a)-[r:RELATED_TO]->(b) RETURN r;

create (:Entity{name:'',idd:'ORO', type:'entity'});
 MATCH (a), (b) WHERE a.idd = "master" AND b.idd = "ORO" CREATE (a)-[r:RELATED_TO]->(b) RETURN r;
 create (:Entity{name:'',idd:'RechercheOperationnelle', type:'entity'});

 MATCH (a), (b) WHERE a.idd = "ORO" AND b.idd = "RechercheOperationnelle" CREATE (a)-[r:RELATED_TO]->(b) RETURN r;


//eqImplicit 

create (:Entity{name:'',idd:'eqFxelZ', type:'entity'});
create (:Entity{name:'',idd:'eqFxelPure', type:'entity'});
create (:Entity{name:'',idd:'eqFxelPureEx', text:"f(x+1)=2*f(x)+1",latexText:"",type:'example'});
 MATCH (a), (b) WHERE a.idd = "eqFxelPure" AND b.idd = "eqFxelPureEx" CREATE (a)-[r:RELATED_TO]->(b) RETURN r;


//bifurcation >ML
create (:Entity{name:'',idd:'bifurcation', type:'entity'});
 create (:Entity{name:'',idd:'intelligence',type:'entity'});
 MATCH (a), (b) WHERE a.idd = "bifurcation" AND b.idd = "intelligence" CREATE (a)-[r:RELATED_TO]->(b) RETURN r;

 create (:Example{idd:'This equation will change how you see the world (the logistic map)',url: "https://youtu.be/ovJcsL7vyrk?t=942",idd:'intelligence',type:'example'});
 MATCH (a), (b) WHERE a.idd = "bifurcation" AND b.idd = "This equation will change how you see the world (the logistic map)" CREATE (a)-[r:RELATED_TO]->(b) RETURN r;

create (:Entity{name:'',idd:'tradingOptions', type:'entity'});
MATCH (a), (b) WHERE a.idd = "bifurcation" AND b.idd = "tradingOptions" CREATE (a)-[r:RELATED_TO]->(b) RETURN r;

create (:Entity{name:'',idd:'random', type:'entity'});
create (:Entity{name:'',idd:'tradingStochastics', type:'entity'});
MATCH (a), (b) WHERE a.idd = "random" AND b.idd = "tradingStochastics" CREATE (a)-[r:RELATED_TO]->(b) RETURN r;


 create (lpam:Isbn{ident:"La physique avec Maple",name:"La physique avec Maple",type:"isbn",isbnValue:"2-7298-7948-X",isbnCanonique:"",sumUp:"Physique, Chimie, Fractales et Chaos"});
  create (p138:Page{ident:"La physique avec Maplep138",name:"p138",type:"page"});
//trading stochastique
// MATCH (a), (b) WHERE a.Name = "A Computer Science Portal" AND b.Name = "" CREATE (a)-[r:edutech]->(b) RETURN r.
 MATCH (a), (b) WHERE a.ident = "La physique avec Maple" AND b.ident = "La physique avec Maplep138" CREATE (a)-[r:CONTAINS]->(b) RETURN r;

   create (p168:page{ident:"La physique avec Maplep168",name:"",type:"page"});
    MATCH (a), (b) WHERE a.ident = "La physique avec Maple" AND b.ident = "La physique avec Maplep168" CREATE (a)-[r:CONTAINS]->(b) RETURN r;


     MATCH (a), (b) WHERE a.ident = "La physique avec Maplep168" AND b.idd = "bifurcation" CREATE (a)-[r:CONTAINS]->(b) RETURN r;
    MATCH (a), (b) WHERE a.ident = "La physique avec Maplep138" AND b.idd = "implicitEq" CREATE (a)-[r:CONTAINS]->(b) RETURN r;

 //AUTOcatalytique p162
   create (p162:Page{idd:"La physique avec Maplep162",type:"page"});
MATCH (a), (b) WHERE a.ident = "La physique avec Maple" AND b.ident = "La physique avec Maplep162" CREATE (a)-[r:CONTAINS]->(b) RETURN r;

create (autocat:Entity:Auto{name:'',idd:'autocatalytique', type:'entity'});
//bug #8 https://stackoverflow.com/questions/64949795/neo4j-match-by-user-defined-variable
CREATE (p162)-[r:CONTAINS]->(autocat) RETURN r;
//kubernetes

create (it:Entity:IT{name:'IT',idd:'IT',
 type:'entity'});
 create (fuzzyLogic:Entity:IT{name:'fuzzy logic',idd:'fuzzy',en:'fuzzy logic',fr:'logique floue',
 type:'speciality'});
 CREATE (it)-[r:CONTAINS]->(fuzzyLogic) RETURN r;
 
create (parallelism:IT{name:'parallelism',idd:'parallelism',en:'parallelism',fr:'parallelism',
 type:'speciality',comment:'concurrency, starvation,sync'});
  CREATE (it)-[r:CONTAINS]->(parallelism) RETURN r;
 
 
create (multiAgents:IT{type:'isbn',url:'https://moueza.github.io/isbn-multi-agents-systems-0-201-36048-9/',
comment:'concurrency, starvation,sync'});
   CREATE (parallelism)-[r:CONTAINS]->(multiAgents) RETURN r;
 
 
 create (compiler:IT{name:'compiler',idd:'compiler',en:'compiler',fr:'compilateur',
 type:'speciality',comment:'stack, heap, pipe'});
 CREATE (it)-[r:CONTAINS]->(compiler) RETURN r;


create (formalProgramsProof:Entity:IT:Formal{name:'formalProgramsProof',comment:"idd = name",
 type:'entity'});
  CREATE (it)-[r:CONTAINS]->(formalProgramsProof) RETURN (r);

create (constraintsProgrammation:Entity:IT:CSP{ type:'entity'});
CREATE (it)-[r:CONTAINS]->(constraintsProgrammation) RETURN (r);



create (generativeProgrammation:IT:Cpp:Language{ type:'instance',comment:"C++"});

create (jeuDeLaVie:IT{ type:'instance',comment:"",url:"https://en.wikipedia.org/wiki/Portal:Mathematics");
create (errorCorrection:IT{ type:'instance',comment:"Cellular automata have also been applied to design error correction codes",url:"https://en.wikipedia.org/wiki/Cellular_automaton",url:"https://github.com/moueza/isbn-978.2.85428.780.6-Programmation-fonctionnelle-Appliquee-aux-calculs-scientifiques-tome-1/blob/main/index.html"});
CREATE (jeuDeLaVie)-[r:CONTAINS]->(errorCorrection) RETURN (r);


create (statueStGabriel:Art:Statue:Sculpture{ type:'instance',comment:"statue novembre 2021 saint sables d Olonne",alias:"Gabriel",alias:"Michel",lieu:"Les Sables d'Olonnes",Google:"statue novembre 2021 saint sables"});

create (mortDeSenequeDavid:Art{comment:"mort de seneque david veines",
 type:'art'});
 
 
 
create (quantum:Entity:IT{ type:'entity'});
create (parallelism:Entity:IT{ type:'entity'});
create (concurrency:Entity:IT{ type:'entity'});
create (deadlock:Entity:IT{ type:'entity'});
create (terminaison:Entity:IT{ type:'entity'});

create (lamport:Entity:IT:Clock:Time{ type:'entity'});
create (lamport:Entity:IT:Clock:Time{ type:'entity'});

create (front:Entity:IT:Algorithm{ type:'entity'});
create (sentinel:Entity:IT:Algorithm{ type:'entity'});
create (sorting:Entity:IT:Algorithm{ type:'entity'});
create (graph:Entity:IT:Algorithm{ type:'entity'});
create (tree:Entity:IT:Algorithm{ type:'entity'});
create (btree:Entity:IT:Algorithm{ type:'instance'});

create (cloud:Entity:IT{ type:'entity'});


create (covid19omicron:Biology:Medicine:Virus:Corona{ type:'instance'});


create (origin:Entity{ type:'entity'});
create (aliensTheorie{ type:'instance',comments:"cosmonautes, ile de java",location:"Java",location:"Hawai",src:"RMC Decouverte"});
create (origin)-[:EXPANDS_TO]->(aliensTheorie);
create (embryology:Entity:Medicine:Biology{ type:'entity',comments:"life previous steps"});
create (humanEvolution:Entity:Biology:Hominides{ type:'entity',comments:"",url:"https://eol.org/",url:"https://species.wikimedia.org/wiki/Main_Page"});
create (origin)-[:EXPANDS_TO]->(humanEvolution);

create (sanGoku:3D:Cartoons{ type:'instance',lang:".jp"});
create (kenLeSurvivant:3D:Cartoons:ChineseMedicine:VitalPoints{ type:'instance',lang:".jp"});



create (mathematics:Mathematics:Entity{ type:'entity'});
create (numericAnalysis:Mathematics{ type:'instance'});
create (numericSimulation:Mathematics{ type:'instance'});
create (fortran:Mathematics{ type:'instance'});
CREATE (numericAnalysis)-[r:CONTAINS]->(fortran) RETURN (r);
create (chainette:Mathematics{ type:'instance'});

fibonacciSeries
